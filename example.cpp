/**
 * @file example.cpp
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ xMemMod
 * @author xMemMod Team
 * @version 1.0
 * 
 * –≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ xMemMod:
 * - –ó–∞–≥—Ä—É–∑–∫–∞ DLL –∏–∑ –ø–∞–º—è—Ç–∏
 * - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤
 * - –ü–æ–∏—Å–∫ —Ñ—É–Ω–∫—Ü–∏–π –ø–æ –∏–º–µ–Ω–∏ –∏ –æ—Ä–¥–∏–Ω–∞–ª—É
 * - –†–∞–±–æ—Ç–∞ —Å –≥–æ—Ç–æ–≤—ã–º–∏ —É–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏
 */

#include "xMemMod.h"
#include <iostream>
#include <iomanip>
#include <vector>
#include <string>

// –ü—Ä–æ—Å—Ç–∞—è DLL –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ (–∑–∞–≥–ª—É—à–∫–∞)
// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –±–∞–π—Ç–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Å DLL
extern const unsigned char SampleDll[];
extern const size_t SampleDllSize;

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π xMemMod
 */
void demonstrateBasicUsage() {
    std::cout << "=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π xMemMod ===" << std::endl;
    std::cout << std::endl;
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ MemoryModule
    MemoryModule::MemoryModule module;
    
    std::cout << "1. –°–æ–∑–¥–∞–Ω–∏–µ MemoryModule —ç–∫–∑–µ–º–ø–ª—è—Ä–∞..." << std::endl;
    std::cout << "   ‚úì –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ" << std::endl;
    std::cout << std::endl;
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –∑–∞–≥—Ä—É–∑–∫–∞ DLL
    std::cout << "2. –ó–∞–≥—Ä—É–∑–∫–∞ DLL –∏–∑ –ø–∞–º—è—Ç–∏..." << std::endl;
    std::cout << "   ‚ö†Ô∏è  –í —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞" << std::endl;
    std::cout << "   –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ: module.LoadFromMemory(dll_data, dll_size)" << std::endl;
    std::cout << std::endl;
}

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å —ç–∫—Å–ø–æ—Ä—Ç–∞–º–∏
 */
void demonstrateExportHandling() {
    std::cout << "=== –†–∞–±–æ—Ç–∞ —Å —ç–∫—Å–ø–æ—Ä—Ç–∞–º–∏ ===" << std::endl;
    std::cout << std::endl;
    
    MemoryModule::MemoryModule module;
    
    // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π DLL
    std::cout << "1. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥—É–ª–µ:" << std::endl;
    std::cout << "   –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: " << (module.Is64Bit() ? "x64" : "x86") << std::endl;
    std::cout << "   –ë–∞–∑–æ–≤—ã–π –∞–¥—Ä–µ—Å: 0x" << std::hex << module.GetBaseAddress() << std::dec << std::endl;
    std::cout << "   –†–∞–∑–º–µ—Ä –æ–±—Ä–∞–∑–∞: " << module.GetImageSize() << " –±–∞–π—Ç" << std::endl;
    std::cout << std::endl;
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å —ç–∫—Å–ø–æ—Ä—Ç–∞–º–∏ (—Å–∏–º—É–ª—è—Ü–∏—è)
    std::cout << "2. –†–∞–±–æ—Ç–∞ —Å —ç–∫—Å–ø–æ—Ä—Ç–∞–º–∏:" << std::endl;
    std::cout << "   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤: " << module.GetExportCount() << std::endl;
    std::cout << "   –ò–º—è –º–æ–¥—É–ª—è: " << module.GetModuleName() << std::endl;
    std::cout << std::endl;
}

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π
 */
void demonstrateFunctionSearch() {
    std::cout << "=== –ü–æ–∏—Å–∫ —Ñ—É–Ω–∫—Ü–∏–π ===" << std::endl;
    std::cout << std::endl;
    
    MemoryModule::MemoryModule module;
    
    // –°–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞
    std::vector<std::string> functions_to_find = {
        "CreateFile",
        "ReadFile", 
        "WriteFile",
        "CloseHandle",
        "GetLastError"
    };
    
    std::cout << "1. –ü–æ–∏—Å–∫ —Ñ—É–Ω–∫—Ü–∏–π –ø–æ –∏–º–µ–Ω–∏:" << std::endl;
    for (const auto& func_name : functions_to_find) {
        FARPROC address = module.GetProcAddress(func_name.c_str());
        if (address) {
            std::cout << "   ‚úì " << func_name << " -> 0x" 
                      << std::hex << reinterpret_cast<void*>(address) << std::dec << std::endl;
        } else {
            std::cout << "   ‚úó " << func_name << " -> –ù–ï –ù–ê–ô–î–ï–ù–ê" << std::endl;
        }
    }
    std::cout << std::endl;
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ –æ—Ä–¥–∏–Ω–∞–ª–∞–º
    std::cout << "2. –ü–æ–∏—Å–∫ —Ñ—É–Ω–∫—Ü–∏–π –ø–æ –æ—Ä–¥–∏–Ω–∞–ª–∞–º:" << std::endl;
    for (uint16_t ordinal = 1; ordinal <= 5; ++ordinal) {
        FARPROC address = module.GetProcAddressByOrdinal(ordinal);
        std::string name = module.GetFunctionName(ordinal);
        uint16_t found_ordinal = module.GetFunctionOrdinal(name.c_str());
        
        std::cout << "   –û—Ä–¥–∏–Ω–∞–ª " << ordinal << " -> " << name 
                  << " (0x" << std::hex << reinterpret_cast<void*>(address) << std::dec << ")" << std::endl;
        std::cout << "   –ò–º—è \"" << name << "\" -> –û—Ä–¥–∏–Ω–∞–ª " << found_ordinal << std::endl;
    }
    std::cout << std::endl;
}

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª–Ω—ã–º —Å–ø–∏—Å–∫–æ–º —ç–∫—Å–ø–æ—Ä—Ç–æ–≤
 */
void demonstrateExportList() {
    std::cout << "=== –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ ===" << std::endl;
    std::cout << std::endl;
    
    MemoryModule::MemoryModule module;
    
    std::cout << "1. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤:" << std::endl;
    auto exports = module.GetExportList();
    
    std::cout << "   –ù–∞–π–¥–µ–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤: " << exports.size() << std::endl;
    std::cout << std::endl;
    
    if (!exports.empty()) {
        std::cout << "2. –ü–µ—Ä–≤—ã–µ 5 —ç–∫—Å–ø–æ—Ä—Ç–æ–≤:" << std::endl;
        std::cout << "   ‚Ññ\t–û—Ä–¥–∏–Ω–∞–ª\tRVA\t\t–ò–º—è\t\t\t–ê–¥—Ä–µ—Å" << std::endl;
        std::cout << "   " << std::string(60, '-') << std::endl;
        
        size_t count = (exports.size() < 5) ? exports.size() : 5;
        for (size_t i = 0; i < count; ++i) {
            const auto& exp = exports[i];
            std::cout << "   " << (i + 1) << "\t"
                      << "0x" << std::hex << exp.ordinal << "\t"
                      << "0x" << std::hex << exp.rva << "\t"
                      << exp.name << "\t\t"
                      << "0x" << std::hex << reinterpret_cast<void*>(exp.address) << std::dec << std::endl;
        }
    }
    std::cout << std::endl;
}

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è C-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
 */
void demonstrateCInterface() {
    std::cout << "=== C-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ===" << std::endl;
    std::cout << std::endl;
    
    std::cout << "1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ C-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:" << std::endl;
    std::cout << "   // –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥—É–ª—è" << std::endl;
    std::cout << "   MemoryModule* module = memory_module_create();" << std::endl;
    std::cout << std::endl;
    
    std::cout << "   // –ó–∞–≥—Ä—É–∑–∫–∞ DLL" << std::endl;
    std::cout << "   bool success = memory_module_load_from_memory(module, data, size);" << std::endl;
    std::cout << std::endl;
    
    std::cout << "   // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏" << std::endl;
    std::cout << "   FARPROC func = memory_module_get_proc_address(module, \"MyFunction\");" << std::endl;
    std::cout << std::endl;
    
    std::cout << "   // –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ" << std::endl;
    std::cout << "   memory_module_destroy(module);" << std::endl;
    std::cout << std::endl;
}

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
 */
void demonstratePracticalUsage() {
    std::cout << "=== –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ===" << std::endl;
    std::cout << std::endl;
    
    std::cout << "1. –ü—Ä–∏–º–µ—Ä –∫–ª–∞—Å—Å–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DLL:" << std::endl;
    std::cout << "   class MyDllWrapper {" << std::endl;
    std::cout << "   private:" << std::endl;
    std::cout << "       MemoryModule::MemoryModule module_;" << std::endl;
    std::cout << "   public:" << std::endl;
    std::cout << "       bool LoadDll(const void* data, size_t size) {" << std::endl;
    std::cout << "           return module_.LoadFromMemory(data, size);" << std::endl;
    std::cout << "       }" << std::endl;
    std::cout << "       " << std::endl;
    std::cout << "       FARPROC GetFunction(const char* name) {" << std::endl;
    std::cout << "           return module_.GetProcAddress(name);" << std::endl;
    std::cout << "       }" << std::endl;
    std::cout << "   };" << std::endl;
    std::cout << std::endl;
    
    std::cout << "2. –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ xMemMod:" << std::endl;
    std::cout << "   ‚úì –ó–∞–≥—Ä—É–∑–∫–∞ DLL –±–µ–∑ –∑–∞–ø–∏—Å–∏ –Ω–∞ –¥–∏—Å–∫" << std::endl;
    std::cout << "   ‚úì –ì–æ—Ç–æ–≤—ã–µ —É–∫–∞–∑–∞—Ç–µ–ª–∏ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏" << std::endl;
    std::cout << "   ‚úì –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤" << std::endl;
    std::cout << "   ‚úì –ü–æ–¥–¥–µ—Ä–∂–∫–∞ x86 –∏ x64" << std::endl;
    std::cout << "   ‚úì C-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤" << std::endl;
    std::cout << "   ‚úì –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–º—è—Ç–∏" << std::endl;
    std::cout << std::endl;
}

/**
 * @brief –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
 */
int main() {
    std::cout << "üöÄ xMemMod - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä" << std::endl;
    std::cout << "=====================================" << std::endl;
    std::cout << std::endl;
    
    try {
        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
        demonstrateBasicUsage();
        
        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å —ç–∫—Å–ø–æ—Ä—Ç–∞–º–∏
        demonstrateExportHandling();
        
        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π
        demonstrateFunctionSearch();
        
        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª–Ω—ã–º —Å–ø–∏—Å–∫–æ–º —ç–∫—Å–ø–æ—Ä—Ç–æ–≤
        demonstrateExportList();
        
        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è C-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        demonstrateCInterface();
        
        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        demonstratePracticalUsage();
        
        std::cout << "‚úÖ –í—Å–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!" << std::endl;
        std::cout << std::endl;
        std::cout << "üìö –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:" << std::endl;
        std::cout << "   - –ò–∑—É—á–∏—Ç–µ README.md" << std::endl;
        std::cout << "   - –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏" << std::endl;
        std::cout << "   - –°–æ–∑–¥–∞–π—Ç–µ Issue –Ω–∞ GitHub –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤" << std::endl;
        std::cout << std::endl;
        
    } catch (const std::exception& e) {
        std::cerr << "‚ùå –û—à–∏–±–∫–∞: " << e.what() << std::endl;
        return 1;
    } catch (...) {
        std::cerr << "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞!" << std::endl;
        return 1;
    }
    
    std::cout << "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...";
    std::cin.get();
    
    return 0;
}
